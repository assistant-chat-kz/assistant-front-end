'use client'

import { useEffect, useRef, useState } from "react";
import { MessageBox } from "react-chat-elements";
import { useUser } from "@/app/hooks/useUser";
import { usePsy } from "@/app/hooks/usePsy";
import { useRouter, useSearchParams } from "next/navigation";

import "react-chat-elements/dist/main.css";
import { axiosClassic } from "@/api/interceptors";
import { useChat } from "@/app/hooks/useChat";
import { useQueryClient } from "@tanstack/react-query";
import { useSocket } from '../../app/hooks/useSocket'
import { useCallPsy } from "@/app/hooks/useCallPsy";
import { useConsultation } from "@/app/hooks/useConsultation";
import { usePsyInChat } from "@/app/hooks/usePsyInChat";
import Modal from '@/components/Modal/Modal'
import SurveyComponent from "../Survey/SurveyComponent";
import { IUserResponce } from "@/types/users.types";
import { IPsyResponce } from "@/types/psy.types";
import { useAllUsersNoAuth } from "@/app/hooks/useAllUsersNoAuth";
import { userService } from "@/app/services/users.service";


interface IMessage {
    //@ts-ignore
    position: left | right;
    title: string;
    text: string
}

export default function ChatComponent({ chatId, messagesInChat }: { chatId?: string; messagesInChat?: any[] }) {
    const [messages, setMessages] = useState<IMessage[]>([]);
    const [input, setInput] = useState("");
    const [members, setMembers] = useState<any>([])
    const [openModal, setOpenModal] = useState(false)
    const [openModalLogout, setOpenModalLogout] = useState(false)
    const [showCallPsyButton, setShowCallPsyButton] = useState(false);

    const [currentUser, setCurrentUser] = useState<IUserResponce | IPsyResponce>()
    const [showSurvey, setShowSurvey] = useState(false)

    console.log(showSurvey, 'showSurvey')

    const router = useRouter()
    const messagesEndRef = useRef<HTMLDivElement | null>(null);

    const userId = typeof window !== "undefined" ? localStorage.getItem("userId") ?? undefined : undefined;
    console.log(userId, 'userId')

    const { data: user, isLoading, error } = useUser(userId)
    const { data: psy, } = usePsy(userId)
    const { data: chat } = useChat(chatId)

    const { data: consultation } = useConsultation(chatId, userId)
    const { callPsychologist } = useCallPsy()
    const { psyInChat } = usePsyInChat()

    const searchParams = useSearchParams();
    const initMessage = searchParams?.get("initMessage");

    const visitUser = async () => {
        try {
            if (userId) {
                const response = await userService.visitUser(userId);
                console.log("+ –í–∏–∑–∏—Ç");
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞", e);
        }
    };

    useEffect(() => {
        visitUser();
    }, [userId]);


    const noAuthUserName = user?.name ? user.name : '–í—ã'

    const userMessage = {
        position: psy ? "left" : "right",
        // type: "text",
        title: psy ? psy.name : noAuthUserName,
        text: input,
    };

    //@ts-ignore
    const socket = useSocket(userId)

    useEffect(() => {
        setCurrentUser(user ? user : psy)
        updateMessagesInChat();
        if (psy && chatId) {
            callPsychologist(chatId, false)
        }
    }, [messagesInChat, psy, chatId, socket]);


    useEffect(() => {
        if (!socket || !chatId) return;

        socket.emit("joinChat", chatId);
        console.log(`üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É: ${chatId}`);

        socket.on("newMessage", (newMessage: IMessage) => {
            console.log("üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ WebSocket:", newMessage);



            const reverseMessage = currentUser?.name !== newMessage.title && noAuthUserName !== '–í—ã'
                ?
                { ...newMessage, position: 'left' } :
                { ...newMessage, position: 'right' }


            setMessages((prev) => {
                const updatedMessages = [...prev, reverseMessage];
                const reverseMessages = updatedMessages.map(message => ({
                    ...message,
                    position: message.position === 'left' ? 'right' : 'left'
                }))
                return updatedMessages
            });

        });

        socket.on("userJoined", ({ members: newMembers }) => {
            console.log(`üë§ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`, newMembers);
            if (psy) psyInChat(chatId, psy.id)
            //@ts-ignore
            setMembers((prev) => {
                const isDifferent = JSON.stringify(prev) !== JSON.stringify(newMembers);
                return isDifferent ? newMembers : prev;
            });
        });


        socket.on("userLeave", ({ userId, members: newMembers }) => {
            console.log(`üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`, newMembers);
            //@ts-ignore
            setMembers((prev) => {
                const isDifferent = JSON.stringify(prev) !== JSON.stringify(newMembers);
                return isDifferent ? newMembers : prev;
            });
        });

        socket.on("send-survey", ({ chatId }) => {
            console.log("üìã –ü—Ä–∏—à—ë–ª –æ–ø—Ä–æ—Å:", chatId);
            setShowSurvey(true);
        });



        return () => {
            socket.off("newMessage");
            socket.off("userJoined");
            socket.off("userLeave");
            socket.off("send-survey");
        };
    }, [socket, chatId, currentUser]);


    // useEffect(() => {
    //     if (!isLoading) {
    //         if (!psy && !user) {
    //             router.push("/login");
    //         }
    //     }
    // }, [user, isLoading, router]);

    const updateMessagesInChat = () => {
        if (messagesInChat) {
            setMessages(messagesInChat)

            if (psy && messagesInChat.length > 0) {

                setMessages(messages => messages.map(msg => ({
                    ...msg,
                    position: msg.position === 'left' ? 'right' : 'left'
                })));
            }
        }
    }



    const handleLeaveChat = () => {
        socket?.emit("leaveChat", chatId);
        router.push('/chatsList')
    };

    const handleLogout = () => {
        localStorage.removeItem('accessToken')
        localStorage.removeItem('userId')
        router.push('/login')
    }

    const sendMessage = () => {
        if (!input.trim()) return;

        console.log("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", input);
        socket?.emit("sendMessage", { chatId, message: userMessage });
        setInput("");
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å summary –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    const [summary, setSummary] = useState<string>("");

    // –í—ã–Ω–µ—Å–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const generateAssistantResponse = async (input: string, chat: any) => {
        const lastMessages = chat?.messages?.slice(-10).map((message: any) => {
            const role = message.author === "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç" ? "–ü—Å–∏—Ö–æ–ª–æ–≥" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
            return `${role}: ${message.text}`;
        }).join('\n') || "";

        const prompt = `
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞—Ö.
–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ.
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —É—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.

–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞:
${summary || "–ü–æ–∫–∞ –Ω–µ—Ç"}

–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
${lastMessages}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${input}
–ü—Å–∏—Ö–æ–ª–æ–≥:
`;

        const res = await axiosClassic.post("yandex-gpt/generate", JSON.stringify({ prompt }));
        return res.data.response;
    };

    const handleSubmit = async (e: any) => {
        e.preventDefault();
        if (!input.trim()) return;

        const messageText = input;
        setInput("");

        const newUserMessage = {
            position: psy ? "left" : "right",
            title: psy ? psy.name : noAuthUserName,
            text: messageText,
        };

        try {
            if (chat?.members.length === 1 || (chat?.members.length !== 3 && members.length !== 3 && chat?.members.includes('–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'))) {
                const typingMessage = { position: "left", title: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", text: "–ü–µ—á–∞—Ç–∞–µ—Ç...", typing: true };
                setMessages((prev) => [...prev, newUserMessage, typingMessage]);

                const responseText = await generateAssistantResponse(messageText, chat);

                await new Promise(resolve => setTimeout(resolve, 800));

                setMessages((prev) => [
                    //@ts-ignore
                    ...prev.filter((m) => !m.typing),
                    { position: "left", title: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", text: responseText },
                ]);
            } else {
                sendMessage();
                setMessages((prev) => [...prev, newUserMessage]);
                await axiosClassic.put(`/chat/${chatId}`, { chatId, messages: [newUserMessage] });
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:", error);
        }
    };





    const handleOpenModal = () => {
        setOpenModal(true)
    }


    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages]);

    return (
        <div className="h-[100dvh] flex flex-col mx-auto border border-gray-300 p-4 rounded-lg overflow-hidden">
            <Modal title={"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ"} content={"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞?"} openModal={openModal} setOpenModal={setOpenModal} action={handleLeaveChat} />
            <Modal title={"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ"} content={"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?"} openModal={openModalLogout} setOpenModal={setOpenModalLogout} action={handleLogout} />
            <div className="flex-1 overflow-auto p-2 bg-white rounded-lg">
                {messages.map((msg, index) => (
                    //@ts-ignore
                    <MessageBox key={index} type="text" {...msg} />
                ))}
                <div ref={messagesEndRef} />
                {showSurvey && userId && !psy ? <SurveyComponent chatId={chatId} user={user || userId} psyId={chat?.psy} /> : undefined}
            </div>

            <form onSubmit={handleSubmit} className="flex mt-4 gap-2 flex-wrap">
                <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    className="flex-1 p-2 border border-gray-300 rounded-lg"
                />
                <button type="submit" className="ml-2 p-2 bg-blue-500 text-white rounded-lg">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                <button type="submit" onClick={() => setOpenModalLogout(true)} className="ml-2 p-2 bg-yellow-500 text-white rounded-lg">–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞</button>
                {psy ?
                    <button type="button" onClick={handleOpenModal} className="ml-2 p-2 bg-red-500 text-white rounded-lg">–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞</button>
                    :
                    !showCallPsyButton ? chat?.call ? <button type="button" className="ml-2 p-2 bg-red-500 text-white rounded-lg">–í—ã –≤—ã–∑–≤–∞–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞</button>
                        : <button type="button" onClick={() => callPsychologist(chatId, true)} className="ml-2 p-2 bg-green-500 text-white rounded-lg">–ü–æ–∑–≤–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞</button> : undefined}
            </form>
        </div>

    );
}
